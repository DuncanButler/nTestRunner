// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace nTestRunner.features.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("nTestRunner Program Startup")]
    public partial class NTestRunnerProgramStartupFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "nTestRunnerStartup.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "nTestRunner Program Startup", @"As a developer
In order to get rapid feedback
When I save a file, the program should be compiled and all tests run and the results
stored in a file in the same format as nunit, so I can use beacons to view the results of the
test.

This feature covers the startup of the program,
calling nTestRunner
starts the program up in default mode, it will scan up the directory chain looking for a solution file, starting at its current directory
it is this file that the applicaion uses to decide what is a test project, and it is the file that is passed to msbuild, it is assumed
that all test files in the solution want to be run, regredless of the test runner used, all results are combined into an nunit result
format.  No display is made when the tests are run, only the file is written to the same directory as the found solution file.

calling nTestRunner -Path | -P [path to solution file]
starts the program up with the solution file path set

calling nTestRunner -Test | -T [Test runner name]
starts the program up with only the specified test runner

calling nTestRunner -Display | -D [Runner Display Name]
starts the program up with the specified display runner", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Startup without arguments")]
        public virtual void StartupWithoutArguments()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Startup without arguments", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("I am a developer");
#line 26
 testRunner.When("I attempt to start the test runner: with arguments \' \'");
#line 27
 testRunner.Then("I see text containing display text \'nTestRunner.sln\'");
#line 28
 testRunner.And("I see text containing display text \'nTestRunner.features.csproj\'");
#line 29
 testRunner.And("I see text containing display text \'nTestRunner.Spec.csproj\'");
#line 30
 testRunner.And("I see text containing display text \'Will build solution using MSBuild4\'");
#line 31
 testRunner.And("I see text containing display text \'Will run tests using MSpec, MSTest, NUnit\'");
#line 32
 testRunner.And("I see text containing display text \'Will display results using Form\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Startup with path arguments")]
        public virtual void StartupWithPathArguments()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Startup with path arguments", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given("I am a developer");
#line 36
 testRunner.When("I attempt to start the test runner: with arguments \'-Path,{currentDirectory}\\Test" +
                    "Data\\TestSolution.sln\'");
#line 37
 testRunner.Then("I see text containing display text \'TestSolution.sln\'");
#line 38
 testRunner.And("I see text containing display text \'TestProject1.csproj\'");
#line 39
 testRunner.And("I see text containing display text \'TestProject2.csproj\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Startup with text runner arguments")]
        public virtual void StartupWithTextRunnerArguments()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Startup with text runner arguments", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("I am a developer");
#line 43
 testRunner.When("I attempt to start the test runner: with arguments \'-Test,MSpec\'");
#line 44
 testRunner.Then("I see text containing display text \'Will run tests using MSpec\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Startup with display arguments")]
        public virtual void StartupWithDisplayArguments()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Startup with display arguments", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("I am a developer");
#line 48
 testRunner.When("I attempt to start the test runner: with arguments \'-Display,Growl\'");
#line 49
 testRunner.Then("I see text containing display text \'Will display results using Growl\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Startup with builder arguments")]
        public virtual void StartupWithBuilderArguments()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Startup with builder arguments", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
 testRunner.Given("I am a developer");
#line 53
 testRunner.When("I attempt to start the test runner: with arguments \'-Builder,MSBuild35\'");
#line 54
 testRunner.Then("I see text containing display text \'Will build solution using MSBuild35\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("when starting creates a blank test results file")]
        public virtual void WhenStartingCreatesABlankTestResultsFile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("when starting creates a blank test results file", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("I am a developer");
#line 58
 testRunner.When("I attempt to start the test runner: with arguments \' \'");
#line 59
 testRunner.Then("I should see the results file \'TestResult.xml\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
